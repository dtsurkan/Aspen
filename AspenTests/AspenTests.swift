import UIKit
import XCTest
@testable import Aspen


class AspenTests: AspenTestCase
{
    override func setUp()
    {
        super.setUp()
		super.registerLoggers()
    }

    override func tearDown()
    {
        super.tearDown()
    }

	// MARK: - Verbose mode

    func testVerbosePasses()
    {
		Aspen.setLoggingLevel(.Verbose)

		self.expectLog { aspenVerbose(passVerbose) }
		self.expectLog { aspenInfo(passInfo) }
        self.expectLog { aspenWarn(passWarn) }
        self.expectLog { aspenError(passError) }
    }

	// MARK: - Info mode

	func testInfoPasses()
	{
		Aspen.setLoggingLevel(.Info)
		self.expectLog { aspenInfo(passInfo) }
		self.expectLog { aspenWarn(passWarn) }
		self.expectLog { aspenError(passError) }
	}

	func testInfoFailures()
	{
		Aspen.setLoggingLevel(.Info)
		self.expectNoLog { aspenVerbose(failVerbose) }
	}

	// MARK: - Warn mode

	func testWarnPasses()
	{
		Aspen.setLoggingLevel(.Warning)
		self.expectLog { aspenWarn(passWarn) }
		self.expectLog { aspenError(passError) }
	}

	func testWarnFailures()
	{
		Aspen.setLoggingLevel(.Warning)
		self.expectNoLog { aspenInfo(failInfo) }
		self.expectNoLog { aspenVerbose(failVerbose) }
	}

	// MARK: - Error mode

	func testErrorPasses()
	{
		Aspen.setLoggingLevel(.Error)
		self.expectLog { aspenError(passError) }
	}

	func testErrorFailures()
	{
		Aspen.setLoggingLevel(.Error)
		self.expectNoLog { aspenVerbose(failVerbose) }
		self.expectNoLog { aspenInfo(failInfo) }
		self.expectNoLog { aspenWarn(failWarn) }
	}
}

let passVerbose = "Verbose; should pass"
let passInfo = "Info; should pass"
let passWarn = "Warn; should pass"
let passError = "Error; should pass"

let failVerbose = "Verbose; should fail"
let failInfo = "Info; should fail"
let failWarn = "Warn; should fail"
let failError = "Error; should fail"
